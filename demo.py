#!/usr/bin/env python3
"""
Script de Demonstra√ß√£o - DeadCodeDetector
"""

import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from deadcode_detector.analyzer import DeadCodeAnalyzer
from deadcode_detector.reporter import Reporter


def demo_basic_analysis():
    print("üîç DEMONSTRA√á√ÉO DO DEADCODEDETECTOR")
    print("=" * 50)
    
    code = """
import os  # Import n√£o utilizado
import sys  # Import n√£o utilizado

def funcao_utilizada():
    return "usada"

def funcao_nao_utilizada():
    return "nunca chamada"

def exemplo_problemas():
    x = 10  # Vari√°vel n√£o utilizada
    y = 20
    print(y)
    
    if False:
        print("C√≥digo morto")
    
    return y
    print("C√≥digo ap√≥s return")

resultado = funcao_utilizada()
exemplo_problemas()
"""
    
    print("C√≥digo de exemplo:")
    print(code)
    print("\n" + "=" * 50)
    
    analyzer = DeadCodeAnalyzer()
    reporter = Reporter()
    
    print(" Analisando c√≥digo...")
    issues = analyzer.analyze(code)
    
    reporter.print_report(issues, "c√≥digo_exemplo.py")
    
    summary = analyzer.get_summary()
    print(f"\n Estat√≠sticas: {summary}")


def demo_file_analysis():
    print("\n" + "=" * 50)
    print(" AN√ÅLISE DE ARQUIVOS DE EXEMPLO")
    print("=" * 50)
    
    analyzer = DeadCodeAnalyzer()
    reporter = Reporter()
    
    example_files = [
        "exemplos/dead_code_1.py",
        "exemplos/dead_code_2.py",
        "exemplos/dead_code_3.py",
        "exemplos/complex_example.py"
    ]
    
    for file_path in example_files:
        if os.path.exists(file_path):
            print(f"\n Analisando: {file_path}")
            
            with open(file_path, 'r', encoding='utf-8') as f:
                code = f.read()
            
            issues = analyzer.analyze(code)
            reporter.print_report(issues, file_path)
        else:
            print(f"‚ö†Ô∏è  Arquivo n√£o encontrado: {file_path}")


def demo_interactive():
    print("\n" + "=" * 50)
    print(" DEMONSTRA√á√ÉO INTERATIVA")
    print("=" * 50)
    
    print("Digite um c√≥digo Python para analisar (digite 'SAIR' em uma linha vazia para terminar):")
    print()
    
    lines = []
    while True:
        line = input(">>> ")
        if line.strip() == "SAIR":
            break
        lines.append(line)
    
    if lines:
        code = "\n".join(lines)
        print("\n Analisando seu c√≥digo...")
        
        analyzer = DeadCodeAnalyzer()
        reporter = Reporter()
        
        issues = analyzer.analyze(code)
        reporter.print_report(issues, "c√≥digo_interativo.py")


def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    try:
        demo_basic_analysis()
        
        demo_file_analysis()
        
        print("\n" + "=" * 50)
        resposta = input("Deseja fazer uma demonstra√ß√£o interativa? (s/n): ").lower().strip()
        
        if resposta in ['s', 'sim', 'y', 'yes']:
            demo_interactive()
        
        print("\n‚úÖ Demonstra√ß√£o conclu√≠da!")
        print("Para usar o DeadCodeDetector em seus pr√≥prios arquivos:")
        print("  python -m deadcode_detector arquivo.py")
        
    except KeyboardInterrupt:
        print("\n\n  Demonstra√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante a demonstra√ß√£o: {e}")


if __name__ == "__main__":
    main() 